#!/usr/bin/env python3
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫
"""

import os
import tkinter as tk
from tkinter import messagebox, scrolledtext, Listbox
import glob
from datetime import datetime

def find_resumes(username=None):
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª—ã –∞–Ω–∫–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç
    """
    resumes_folder = "—Ä–µ–∑—é–º–µ"
    
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
    if not os.path.exists(resumes_folder):
        os.makedirs(resumes_folder)
        return []
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    if username:
        pattern = f"{resumes_folder}/RESUME_{username}_*.md"
    else:
        pattern = f"{resumes_folder}/RESUME_*.md"
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã
    resume_files = glob.glob(pattern)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    resume_files.sort(reverse=True)
    
    return resume_files

def read_resume(file_path):
    """
    –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∞–Ω–∫–µ—Ç
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        return content
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"

def parse_filename(filename):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    """
    try:
        # RESUME_username_20240115_143025.md
        name_parts = filename.replace('RESUME_', '').replace('.md', '').split('_')
        username = name_parts[0]
        date_str = name_parts[1] if len(name_parts) > 1 else ""
        time_str = name_parts[2] if len(name_parts) > 2 else ""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if date_str and len(date_str) == 8:
            date_obj = datetime.strptime(date_str, "%Y%m%d")
            pretty_date = date_obj.strftime("%d.%m.%Y")
            if time_str and len(time_str) == 6:
                time_obj = datetime.strptime(time_str, "%H%M%S")
                pretty_time = time_obj.strftime("%H:%M:%S")
                return username, f"{pretty_date} {pretty_time}"
            return username, pretty_date
        
        return username, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    except:
        return filename, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

def create_gui():
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç
    """
    window = tk.Tk()
    window.title("üîç –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç")
    window.geometry("800x600")
    window.configure(bg="#f0f0f0")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title_label = tk.Label(
        window, 
        text="üîç –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", 
        font=("Arial", 16, "bold"),
        bg="#f0f0f0",
        fg="#333333"
    )
    title_label.pack(pady=15)
    
    # –§—Ä–µ–π–º –ø–æ–∏—Å–∫–∞
    search_frame = tk.Frame(window, bg="#f0f0f0")
    search_frame.pack(fill="x", padx=20, pady=10)
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tk.Label(search_frame, text="üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", 
             bg="#f0f0f0", font=("Arial", 10)).pack(side="left")
    
    username_entry = tk.Entry(search_frame, width=30, font=("Arial", 10))
    username_entry.pack(side="left", padx=10)
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    file_paths = []
    
    def search_by_username():
        """–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        nonlocal file_paths
        username = username_entry.get().strip()
        
        if username:
            resume_files = find_resumes(username)
            status_text = f"–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}"
        else:
            resume_files = find_resumes()
            status_text = "–í—Å–µ –ê–Ω–∫–µ—Ç—ã"
        
        display_results(resume_files, status_text)
        file_paths = resume_files  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤
    
    def show_all_resumes():
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã"""
        nonlocal file_paths
        resume_files = find_resumes()
        display_results(resume_files, "–í—Å–µ –∞–Ω–∫–µ—Ç—ã")
        file_paths = resume_files
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    button_frame = tk.Frame(search_frame, bg="#f0f0f0")
    button_frame.pack(side="left", padx=20)
    
    tk.Button(
        button_frame,
        text="üîç –ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—ã",
        command=search_by_username,
        bg="#4CAF50",
        fg="white",
        font=("Arial", 9)
    ).pack(side="left", padx=5)
    
    tk.Button(
        button_frame,
        text="üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
        command=show_all_resumes,
        bg="#2196F3",
        fg="white",
        font=("Arial", 9)
    ).pack(side="left", padx=5)
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
    status_label = tk.Label(
        window,
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—ã'",
        bg="#f0f0f0",
        font=("Arial", 9),
        fg="#666666"
    )
    status_label.pack(pady=5)
    
    # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content_frame = tk.Frame(window, bg="#f0f0f0")
    content_frame.pack(fill="both", expand=True, padx=20, pady=10)
    
    # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    left_frame = tk.Frame(content_frame, bg="#f0f0f0")
    left_frame.pack(side="left", fill="y", padx=(0, 10))
    
    tk.Label(
        left_frame, 
        text="üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:", 
        font=("Arial", 10, "bold"),
        bg="#f0f0f0"
    ).pack(anchor="w")
    
    # Listbox –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    listbox = Listbox(left_frame, width=40, height=15, font=("Arial", 9))
    listbox.pack(fill="y", expand=True)
    
    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è listbox
    listbox_scroll = tk.Scrollbar(left_frame, orient="vertical")
    listbox_scroll.pack(side="right", fill="y")
    listbox.config(yscrollcommand=listbox_scroll.set)
    listbox_scroll.config(command=listbox.yview)
    
    # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    right_frame = tk.Frame(content_frame, bg="#f0f0f0")
    right_frame.pack(side="right", fill="both", expand=True)
    
    tk.Label(
        right_frame, 
        text="üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–Ω–∫–µ—Ç—ã:", 
        font=("Arial", 10, "bold"),
        bg="#f0f0f0"
    ).pack(anchor="w")
    
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content_text = scrolledtext.ScrolledText(
        right_frame,
        wrap=tk.WORD,
        width=60,
        height=15,
        font=("Consolas", 9)
    )
    content_text.pack(fill="both", expand=True)
    
    def display_results(resume_files, status):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_label.config(text=f"{status} (–Ω–∞–π–¥–µ–Ω–æ: {len(resume_files)})")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        listbox.delete(0, tk.END)
        
        if not resume_files:
            listbox.insert(tk.END, "‚ùå –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            content_text.delete(1.0, tk.END)
            content_text.insert(tk.END, "–∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
        for file_path in resume_files:
            filename = os.path.basename(file_path)
            username, date_str = parse_filename(filename)
            display_text = f"{username} | {date_str}"
            listbox.insert(tk.END, display_text)
    
    def on_resume_select(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–Ω–∫–µ—Ç—ã –≤ —Å–ø–∏—Å–∫–µ"""
        selection = listbox.curselection()
        if not selection or not file_paths:
            return
        
        index = selection[0]
        if index < len(file_paths):
            content = read_resume(file_paths[index])
            content_text.delete(1.0, tk.END)
            content_text.insert(tk.END, content)
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
    listbox.bind("<<ListboxSelect>>", on_resume_select)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ —Å –∞–Ω–∫–µ—Ç—ã
    def open_resumes_folder():
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –∞–Ω–∫–µ—Ç—ã–µ"""
        resumes_folder = "—Ä–µ–∑—é–º–µ"
        if not os.path.exists(resumes_folder):
            os.makedirs(resumes_folder)
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{resumes_folder}'")
        os.startfile(resumes_folder)
    
    # –§—Ä–µ–π–º –¥–ª—è –Ω–∏–∂–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    bottom_frame = tk.Frame(window, bg="#f0f0f0")
    bottom_frame.pack(pady=10)
    
    tk.Button(
        bottom_frame,
        text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –∞–Ω–∫–µ—Ç–∞–º–∏",
        command=open_resumes_folder,
        bg="#FF9800",
        fg="white",
        font=("Arial", 10)
    ).pack(side="left", padx=5)
    
    tk.Button(
        bottom_frame,
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
        command=window.destroy,
        bg="#f44336",
        fg="white",
        font=("Arial", 10)
    ).pack(side="left", padx=5)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    window.after(100, show_all_resumes)
    
    window.mainloop()

def simple_console_version():
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    print("üîç –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç")
    print("=" * 40)
    
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()
    
    if username:
        resume_files = find_resumes(username)
        title = f"–ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}"
    else:
        resume_files = find_resumes()
        title = "–í—Å–µ –∞–Ω–∫–µ—Ç—ã"
    
    if not resume_files:
        print("‚ùå –ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    print(f"\nüìÅ {title}: {len(resume_files)}")
    print("-" * 50)
    
    for i, file_path in enumerate(resume_files, 1):
        filename = os.path.basename(file_path)
        username, date_str = parse_filename(filename)
        print(f"{i}. üë§ {username} | üìÖ {date_str}")
        print(f"   üìÑ {filename}")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ê–Ω–∫–µ—Ç—É
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (1-{len(resume_files)}, –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if choice == '0':
            return
        
        if choice.isdigit() and 1 <= int(choice) <= len(resume_files):
            content = read_resume(resume_files[int(choice)-1])
            print("\n" + "="*60)
            print(content)
            print("="*60)
    except:
        pass
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    # –í—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
    create_gui()